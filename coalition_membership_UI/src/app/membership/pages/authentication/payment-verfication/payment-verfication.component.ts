import { Component, Input, OnInit, ViewChild } from "@angular/core";

import { CommonModule } from "@angular/common";
import {
  ActivatedRoute,
  ActivatedRouteSnapshot,
  Router,
  RouterModule,
} from "@angular/router";
import { ReactiveFormsModule } from "@angular/forms";

import { PaymentService } from "src/app/services/payment.service";

import { environment } from "src/environments/environment";
import { MemberService } from "src/app/services/member.service";

import { v4 as uuidv4 } from "uuid";
import { CommonService } from "src/app/services/common.service";
import { NgbModal } from "@ng-bootstrap/ng-bootstrap";

import { PyamentDetilModalComponent } from "./pyament-detil-modal/pyament-detil-modal.component";
import {
  IMembersGetDto,
  MoodleUpdateDto,
} from "src/app/models/auth/membersDto";
import { errorToast, successToast } from "src/app/services/toast.service";

@Component({
  selector: "app-payment-verfication",
  standalone: true,
  imports: [CommonModule, RouterModule, ReactiveFormsModule],
  templateUrl: "./payment-verfication.component.html",
  styleUrls: ["./payment-verfication.component.scss"],
})
export default class PaymentVerficationComponent implements OnInit {
  txt_rn: string;
  baseUrl = environment.clienUrl;
  autoGeneratedId: string;
  selectedMember!: IMembersGetDto;

  constructor(
    private route: ActivatedRoute,
    private router: Router,
    private paymentService: PaymentService,
    private commonService: CommonService,
    private memberService: MemberService,
    // private messageService: MessageService,
    private modalService: NgbModal
  ) {}

  ngOnInit(): void {
    const snapshot: ActivatedRouteSnapshot = this.route.snapshot;
    this.txt_rn = snapshot.paramMap.get("txt_rn");



    this.verifyPayment();
    this.autoGeneratedId = uuidv4();
  }

  verifyPayment() {
    this.paymentService.verifyPayment(this.txt_rn).subscribe({
      next: (res) => {
        if (res.response) {
          if (res.response.data.status == "success") {
            this.MakePaymentConfirmation();
          } else {
            errorToast(res.response.status || res.message, res.message);
            // this.messageService.add({ severity: 'error', summary: 'Something went Wrong', detail: res.response.data.status });
          }
        } else {
          errorToast(res.response.status || res.message, res.message);
          //this.messageService.add({ severity: 'error', summary: 'Something went Wrong', detail: res.message });
        }
      },
      error: (err) => {
        errorToast(err);
        // this.messageService.add({ severity: 'success', summary: 'Successfull', detail: err });
      },
    });
  }

  MakePaymentConfirmation() {
    this.paymentService.MakePaymentConfirmation(this.txt_rn).subscribe({
      next: (res) => {
        successToast("Your Payment was successfull");
        this.selectedMember = res.data;
        this.openModal();
      },
    });
  }

  updateMember(updateMoodleDto: MoodleUpdateDto) {
    this.memberService.updateMoodleApi(updateMoodleDto).subscribe({
      next: (res) => {
        if (res.success) {
          this.openModal();
        } else {
          this.openModal(); //  window.location.href = this.baseUrl;
        }
      },
      error: (err) => {
        //this.messageService.add({ severity: 'error', summary: 'Something went wrong!!', detail: err });

        this.openModal(); // window.location.href = this.baseUrl;
      },
    });
  }

  openModal() {
    let modalRef = this.modalService.open(PyamentDetilModalComponent, {
      size: "lg",
      backdrop:'static'
    });



    modalRef.componentInstance.userId = this.selectedMember.id
    modalRef.componentInstance.fullName = this.selectedMember.fullName;
    modalRef.componentInstance.membershipId = this.selectedMember.memberId;
    modalRef.componentInstance.membershipType =
      this.selectedMember.membershipType?.name;

    modalRef.result.then(() => {
      window.location.href = this.baseUrl;
    });
  }
}
